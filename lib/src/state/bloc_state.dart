//Library for the bloc_state file and its generated implementation file.
library bloc_state;

import 'dart:convert' show json;

import 'package:built_collection/built_collection.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';
import 'package:meta/meta.dart';

import '../field_id.dart';
import '../serializers.dart';
import 'field_state.dart';

part 'bloc_state.g.dart';
//The file generated by built_value.

//TODO: add the serializer examples and the [] fuctionality examples.
//TODO: add link to the example code file under each H1 header. Usage and Serializer.
//TODO: for the equality checks should the print statements be added or is this pointless as the full code will be linked in.
//TODO: use @template and @macro comment tags to insert the example for there specific constructor pages.
//TODO: update examples after change from String key to FieldID.

///Contains the state of all of the [StateField]s in the [StateBloc] with the
///key [key].
///
///All fields are immutable.
///
///To get a specific [FieldState] use the list access operator (square brackets)
///with the [FieldState.key] as the "index".
///
///# Usage
///### Setup
///```dart
/////keys for BlocState.
///const String blocKey = "blocKey";
///const String newBlocKey = "newBlocKey";
/////keys for FieldState.
///const String fieldKey1 = "fieldKey1";
///const String fieldKey2 = "fieldKey2";
///
/////create 2 FieldStates
///FieldState<String> field1 = FieldState(fieldKey1, "someData");
///FieldState<int> field2 = FieldState(fieldKey2, 4);
///
/////Create a Map of keys to FieldStates.
///final Map<String, FieldState> map = Map();
///map[field1.key] = field1;
///map[field2.key] = field2;
///
/////Create BuiltMap from Map.
///BuiltMap<String, FieldState> builtMap = BuiltMap.of(map);
///```
///
///### Basic Constructor
///```dart
/////Create a BlocState using the basic constructor.
///BlocState blocState = BlocState(blocKey, builtMap);
///```
///
///### [StateBlocState] from [BlocStateBuilder]
///```dart
/////Create a BlocState using a BlocStateBuilder.
///BlocState blocStateFromBuilder = BlocState.fromBuilder((b) => b
///  ..key = blocKey
///  ..stateMap = builtMap);
/// ```
///
///### [StateBlocState] from [String] ([key]) and [BuiltMap<String, FieldState>] ([stateMap])
///```dart
/////Create a BlocState from a Map.
///BlocState blocStateFromMap = BlocState.fromMap(blocKey, map);
///```
///
///### [StateBlocState] from an existing [StateBlocState] using [BlocStateBuilder]
///```dart
/////Rebuild a NEW BlocState from an existing BlocState.
/////The original will be unchanged as BlocState is immutable.
///BlocState blocStateRebuild = blocState.rebuild((b) => b..key = newBlocKey);
///```
///
///### Creating and using a [BlocStateBuilder]
///```dart
/////Create a BlocStateBuilder from a BlocState.
/////Any changes made to this Builder will not result in changes in the original
/////BlocState object.
///BlocStateBuilder blocStateBuilder = blocState.toBuilder();
///
/////change the key a few times.
///blocStateBuilder.key = fieldKey1;
/////Doing something else.
///blocStateBuilder.key = newBlocKey;
///
/////build the BlocState.
///BlocState blocStateBuild = blocStateBuilder.build();
///```
///
///### [StateBlocState] equality
///```dart
/////blocState, blocStateFromMap and blocStateFromBuilder all have fields with
/////the same values and are therefore equal.
///assert(blocState == blocStateFromBuilder);
///assert(blocState == blocStateFromMap);
///
/////blocStateBuild and blocStateRebuild both had there key changed to the
/////newBlocKey and the stateMap is unchanges and they therefore are equal.
///assert(blocStateBuild == blocStateRebuild);
///```
@BuiltValue(nestedBuilders: false)
abstract class StateBlocState
    implements Built<StateBlocState, StateBlocStateBuilder> {
  static Serializer<StateBlocState> get serializer =>
      _$stateBlocStateSerializer;

  factory StateBlocState(
          String blocKey, BuiltMap<FieldID, FieldState> stateMap) =>
      StateBlocState.fromBuilder((b) => b
        ..blocKey = blocKey
        ..stateMap = stateMap);

  ///@nodoc
  ///Currently does not work due to an issue with what appears to be a missing
  ///"key" for a List which built_value tries to cast to a String.
  ///
  ///This method will ALWAYS THROW an [UnimplementedError](dart:core).
  @alwaysThrows
  factory StateBlocState.deserialize(String string) => throw UnimplementedError(
      "deserialize has not yet been correctly implemented. Use fromJSON instead.");

  factory StateBlocState.fromBuilder([updates(StateBlocStateBuilder b)]) =
      _$StateBlocState;

  ///Deserializes a [String] using the [standardJSONSerializers] and
  ///the [json.encode()](dart:conver) method.
  factory StateBlocState.fromJSON(String string) => standardJSONSerializers
      .deserializeWith(StateBlocState.serializer, json.decode(string));

  factory StateBlocState.fromMap(
          String blocKey, Map<FieldID, FieldState> stateMap) =>
      StateBlocState.fromBuilder((b) => b
        ..blocKey = blocKey
        ..stateMap = BuiltMap(stateMap));

  StateBlocState._();

  ///The key of the [StateBloc] that this [StateBlocState] represents.
  String get blocKey;

  ///A [BuiltMap] of the [FieldState.key] to [FieldState]s.
  BuiltMap<FieldID, FieldState> get stateMap;
  //json.encode(serializers.serialize(blocState));

  ///Returns the [FieldState] associated with the [FieldState.key].
  FieldState operator [](FieldID fieldID) => stateMap[fieldID];

  ///@nodoc
  ///This method currently works but the [deserialize] does not and it therefore
  ///is not usable right now.
  ///
  ///This method will ALWAYS THROW an [UnimplementedError](dart:core).
  @alwaysThrows
  static String serialize(StateBlocState blocState) => throw UnimplementedError(
      "serialize has not yet been correctly implemented. Use toJSON instead.");
  //serializers.deserializeWith(BlocState.serializer, json.decode(string));

  ///Serializes a [StateBlocState] using the [standardJSONSerializers] and
  ///the [json.encode()](dart:convert) method.
  static String toJSON(StateBlocState blocState) =>
      json.encode(standardJSONSerializers.serialize(blocState));
}
