//Library for the bloc_state file and its generated implementation file.
library bloc_state;

import 'package:built_collection/built_collection.dart';
import 'package:built_value/built_value.dart';
import 'package:built_value/serializer.dart';

import 'field_state.dart';

//The file generated by built_value.
part 'bloc_state.g.dart';

//TODO: update the example to include the new constructors from FieldState for easier FieldState creation.

///Contains the state of all of the [StateField]s in the [StateBloc] with the
///key [key].
///
///All fields are immutable.
///
///To get a specific [FieldState] use the list access operator (square brackets)
///with the [FieldState.key] as the "index".
///
///```dart
//////keys for BlocState.
///const String blocKey = "blocKey";
///const String newBlocKey = "newBlocKey";
/////keys for FieldState.
///const String fieldKey1 = "fieldKey1";
///const String fieldKey2 = "fieldKey2";
///
/////create 2 FieldStates
///FieldState<String> field1 = FieldState((b) => b
///  ..key = fieldKey1
///  ..data = "somedata");
///FieldState<int> field2 = FieldState((b) => b
///  ..key = fieldKey2
///  ..data = 4);
///
/////Create a Map of keys to FieldStates.
///final Map<String, FieldState> map = Map();
///map[field1.key] = field1;
///map[field2.key] = field2;
///
/////Create BuiltMap from Map.
///BuiltMap<String, FieldState> builtMap = BuiltMap.of(map);
///
/////Create a BlocState using the basic constructor.
///BlocState blocState = BlocState(blocKey, builtMap);
///
/////Create a BlocState using a BlocStateBuilder.
///BlocState blocStateFromBuilder = BlocState.fromBuilder((b) => b
///  ..key = blocKey
///  ..stateMap = builtMap);
///
/////Create a BlocState from a Map.
///BlocState blocStateFromMap = BlocState.fromMap(blocKey, map);
///
/////Rebuild a NEW BlocState from an existing BlocState.
/////The original will be unchanged as BlocState is immutable.
///BlocState blocStateRebuild = blocState.rebuild((b) => b..key = newBlocKey);
///
/////Create a BlocStateBuilder from a BlocState.
/////Any changes made to this Builder will not result in changes in the original
/////BlocState object.
///BlocStateBuilder blocStateBuilder = blocState.toBuilder();
///
/////change the key a few times.
///blocStateBuilder.key = fieldKey1;
/////Doing something else.
///blocStateBuilder.key = newBlocKey;
///
/////build the BlocState.
///BlocState blocStateBuild = blocStateBuilder.build();
///
/////blocState, blocStateFromMap and blocStateFromBuilder all have fields with
/////the same values and are therefore equal.
///assert(blocState == blocStateFromBuilder);
///assert(blocState == blocStateFromMap);
///
/////blocStateBuild and blocStateRebuild both had there key changed to the
/////newBlocKey and the stateMap is unchanges and they therefore are equal.
///assert(blocStateBuild == blocStateRebuild);
///```
@BuiltValue(nestedBuilders: false)
abstract class BlocState implements Built<BlocState, BlocStateBuilder> {
  ///The key of the [StateBloc] that this [BlocState] represents.
  String get key;

  ///A [BuiltMap] of the [FieldState.key] to [FieldState]s.
  BuiltMap<String, FieldState> get stateMap;

  ///Returns the [FieldState] associated with the [FieldState.key].
  FieldState operator [](String key) => stateMap[key];

  BlocState._();

  factory BlocState(String key, BuiltMap<String, FieldState> stateMap) =>
      BlocState.fromBuilder((b) => b
        ..key = key
        ..stateMap = stateMap);

  factory BlocState.fromMap(String key, Map<String, FieldState> stateMap) =>
      BlocState.fromBuilder((b) => b
        ..key = key
        ..stateMap = BuiltMap(stateMap));

  factory BlocState.fromBuilder([updates(BlocStateBuilder b)]) = _$BlocState;

  //TODO: document how to use serializer
  static Serializer<BlocState> get serializer => _$blocStateSerializer;
}
